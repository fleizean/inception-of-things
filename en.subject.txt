Inception-of-Things
( IoT )

Summary: This document is a System Administration related exercise.
Version: 3.1

Contents
I

Preamble

2

II

Introduction

3

III

General guidelines

4

IV

Mandatory part
IV.1
Part 1: K3s and Vagrant . . . . . . . . . . . . . . . . . . . . . . . . .
IV.2
Part 2: K3s and three simple applications . . . . . . . . . . . . . . . .
IV.3
Part 3: K3d and Argo CD . . . . . . . . . . . . . . . . . . . . . . . .

5
6
9
12

V

Bonus part

16

VI

Submission and peer-evaluation

17

1

Chapter I
Preamble

2

Chapter II
Introduction
This project aims to deepen your knowledge by making you use K3d and K3s with
Vagrant.
You will learn how to set up a personal virtual machine with Vagrant and the
distribution of your choice. Then, you will learn how to use K3s and its Ingress.
Last but not least, you will discover K3d that will simplify your life.
These steps will get you started with Kubernetes.

This project is a minimal introduction to Kubernetes. Indeed, this
tool is too complex to be mastered in a single subject.

3

Chapter III
General guidelines
• The whole project has to be done in a virtual machine.
• You have to put all the configuration files of your project in folders located at the
root of your repository (go to Submission and peer-evaluation for more information).
The folders of the mandatory part will be named: p1, p2 and p3, and the bonus
one: bonus.
• This topic requires you to apply concepts that, depending on your background, you
may not have covered yet. We therefore advise you not to be afraid to read a lot
of documentation to learn how to use K8s with K3s, as well as K3d.

You can use any tools you want to set up your host virtual machine as
well as the provider used in Vagrant.

4

Chapter IV
Mandatory part
This project will consist of setting up several environments under specific rules.
It is divided into three parts you have to do in the following order:

• Part 1: K3s and Vagrant
• Part 2: K3s and three simple applications
• Part 3: K3d and Argo CD

5

Inception-of-Things
( IoT )

IV.1

Part 1: K3s and Vagrant

To begin, you have to set up 2 machines.
Write your first Vagrantfile using the latest stable version of the distribution
of your choice as your operating system. It is STRONGLY advised to allow only the
bare minimum in terms of resources: 1 CPU and 512 MB of RAM (or 1024). The machines must be run using Vagrant.
Here are the expected specifications:
• The machine names must be the login of someone from your team. The hostname
of the first machine must be followed by the capital letter S (like Server). The
hostname of the second machine must be followed by SW (like ServerWorker).
• Have a dedicated IP on the primary network interface. The IP of the first machine
(Server) will be 192.168.56.110, and the IP of the second machine (ServerWorker)
will be 192.168.56.111.
• Be able to connect with SSH on both machines with no password.

You will set up your Vagrantfile according to modern practices.

You must install K3s on both machines:
• In the first one (Server), it will be installed in controller mode.
• In the second one (ServerWorker), in agent mode.

You will have to use kubectl (and therefore install it as well).

6

Inception-of-Things
( IoT )
Here is a basic example of a Vagrantfile:
$> cat Vagrantfile
Vagrant.configure(2) do |config|
[...]
config.vm.box = REDACTED
config.vm.box_url = REDACTED

end

config.vm.define "wilS" do |control|
control.vm.hostname = "wilS"
control.vm.network REDACTED, ip: "192.168.56.110"
control.vm.provider REDACTED do |v|
v.customize ["modifyvm", :id, "--name", "wilS"]
[...]
end
config.vm.provision :shell, :inline => SHELL
[...]
SHELL
control.vm.provision "shell", path: REDACTED
end
config.vm.define "wilSW" do |control|
control.vm.hostname = "wilSW"
control.vm.network REDACTED, ip: "192.168.56.111"
control.vm.provider REDACTED do |v|
v.customize ["modifyvm", :id, "--name", "wilSW"]
[...]
end
config.vm.provision "shell", inline: <<-SHELL
[..]
SHELL
control.vm.provision "shell", path: REDACTED
end

7

Inception-of-Things
( IoT )
Here is an example when the virtual machines are launched:

Here is an example when the configuration is not complete:

Here is an example when the machines are correctly configured:

On the example above the use of ifconfig eth1 is done under macOS, if
you are under the latest version of linux the command is: ip a show
eth1

8

Inception-of-Things
( IoT )

IV.2

Part 2: K3s and three simple applications

You now understand the basics of K3s. Time to go further! To complete this part, you
will need only one virtual machine with the distribution of your choice (latest
stable version) and K3s in server mode installed.
You will set up 3 web applications of your choice that will run in your K3s instance.
You will have to be able to access them depending on the HOST used when making a
request to the IP address 192.168.56.110. The name of this machine will be your login
followed by S (e.g., wilS if your login is wil).
Here is a simple example diagram:

When a client inputs the IP address 192.168.56.110 in their web browser with the
HOST app1.com, the server must display app1. When the HOST app2.com is used, the
server must display app2. Otherwise, app3 will be selected by default.

As you can see, application number 2 has 3 replicas.
configuration to create the replicas.

9

Adapt your

Inception-of-Things
( IoT )
First, here is an expected result when the virtual machine is not configured:

10

Inception-of-Things
( IoT )
Here is an expected result when the virtual machine is correctly configured:

The Ingress is not displayed here on purpose.
it to your evaluators during your defense.

11

You will have to show

Inception-of-Things
( IoT )

IV.3

Part 3: K3d and Argo CD

You now master a minimalist version of K3S! Time to set up everything you have just
learnt (and much more!) but without Vagrant this time. To begin, install K3D on your
virtual machine.

You will need Docker for K3d to work, and probably some other
software as well. Therefore, you must write a script to install
all the necessary packages and tools during your defense.

First of all, you must understand the difference between K3S and K3D.
Once your configuration works as expected, you can start to create your first continuous integration! To do so, you have to set up a small infrastructure following the
logic illustrated by the diagram below:

You have to create two namespaces:
• The first one will be dedicated to Argo CD.
• The second one will be named dev and will contain an application. This application
will be automatically deployed by Argo CD using your online Github repository.

Yes, indeed. You will have to create a public repository on Github
where you will push your configuration files.
You are free to organize it the way you like. The only mandatory
requirement is to put the login of a member of the group in the name
of your repository.

12

Inception-of-Things
( IoT )
The application to be deployed must have two different versions (read about tagging if you are unfamiliar with it).
You have two options:
• You can use the pre-made application created by Wil, which is available on Dockerhub.
• Or you can code and use your own application. Create a public Dockerhub repository to push a Docker image of your application. Also, tag its two versions this
way: v1 and v2.

You can find Wil’s application on Dockerhub here:
https://hub.docker.com/r/wil42/playground.
The application uses port 8888.
Find the two versions in the TAG section.

If you decide to create your own application, it must be made
available thanks to a public Docker image pushed into a Dockerhub
repository. The two versions of your application must also have a
few differences.

You must be able to change the version from your public Github repository, then
check that the application has been correctly updated.
Here is an example showing the two namespaces and the POD located in the dev
namespace:
$> k get ns
NAME
STATUS AGE
[..]
argocd
Active 19h
dev
Active 19h
$> k get pods -n dev
NAME
READY
wil-playground-65f745fdf4-d2l2r 1/1
$>

STATUS
Running

RESTARTS
0

13

AGE
8m9s

Inception-of-Things
( IoT )
Here is an example of launching Argo CD that was configured:

We can check that our application uses the version we expect (in this case, the v1):
$> cat deployment.yaml | grep v1
- image: wil42/playground:v1
$> curl http://localhost:8888/
{"status":"ok", "message": "v1"}

Here is a screenshot of Argo CD with our v1 application using Github:

Below, we update our Github repository by changing the version of our application:
$>sed -i 's/wil42\/playground\:v1/wil42\/playground\:v2/g' deployment.yaml
$>g up "v2" # git add+commit+push
[..]
a773f39..999b9fe master -> master
$> cat deployment.yaml | grep v2
- image: wil42/playground:v2

14

Inception-of-Things
( IoT )
You can see thanks to Argo CD that the application is synchronized:

The application was successfully updated:

We check that the new version is available:
$> curl http://localhost:8888/
{"status":"ok", "message": "v2"}

During the evaluation process, you will have to do this operation
with the app you chose: Wil’s or yours.

15

Chapter V
Bonus part
The following bonus task is intended to be useful: add Gitlab to the lab you completed
in Part 3.

Beware this bonus is complex. The latest version available of Gitlab
from the official website is expected.

You are allowed to use whatever you need to achieve this extra. For example, helm
could be useful here.
• Your Gitlab instance must run locally.
• Configure Gitlab to make it work with your cluster.
• Create a dedicated namespace named gitlab.
• Everything you did in Part 3 must work with your local Gitlab.
Turn this extra work in a new folder named bonus and located at the root of your
repository. You can add everything needed so your entire cluster works.
The bonus part will only be assessed if the mandatory part is
flawless. Flawless means the mandatory part has been fully completed
and functions without issues. If you have not passed ALL the
mandatory requirements, your bonus part will not be evaluated at
all.

16

Chapter VI
Submission and peer-evaluation
Turn in your assignment in your Git repository as usual. Only the work inside your repository will be evaluated during the defense. Don’t hesitate to double check the names of
your folders and files to ensure they are correct.
Reminder:
• Turn the mandatory part in three folders located at the root of your repository:
p1, p2 and p3.
• Optional: Turn the bonus part in a located at the root of your repository: bonus.
Below is an example of the expected directory structure:
$> find -maxdepth 2 -ls
424242
4 drwxr-xr-x 6 wandre
424242
4 drwxr-xr-x 3 wandre
424242
4 -rw-r--r-- 1 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 3 wandre
424242
4 -rw-r--r-- 1 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 3 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 3 wandre
424242
4 -rw-r--r-- 1 wandre
424242
4 drwxr-xr-x 2 wandre
424242
4 drwxr-xr-x 2 wandre

wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42
wil42

4096 sept. 17 23:42 .
4096 sept. 17 23:42 ./p1
XXXX sept. 17 23:42 ./p1/Vagrantfile
4096 sept. 17 23:42 ./p1/scripts
4096 sept. 17 23:42 ./p1/confs
4096 sept. 17 23:42 ./p2
XXXX sept. 17 23:42 ./p2/Vagrantfile
4096 sept. 17 23:42 ./p2/scripts
4096 sept. 17 23:42 ./p1/confs
4096 sept. 17 23:42 ./p3
4096 sept. 17 23:42 ./p3/scripts
4096 sept. 17 23:42 ./p3/confs
4096 sept. 17 23:42 ./bonus
XXXX sept. 17 23:42 ./bonus/Vagrantfile
4096 sept. 17 23:42 ./bonus/scripts
4096 sept. 17 23:42 ./bonus/confs

Any scripts you need will be added in a scripts folder.
configuration files will be in a confs folder.

The

The evaluation process will happen on the computer of the evaluated
group.

17

